# Copyright (C) 2023 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load(
    "@kernel_toolchain_info//:dict.bzl",
    "VARS",
)
load(":architecture_constants.bzl", "SUPPORTED_ARCHITECTURES")
load(":clang_toolchain.bzl", "clang_toolchain")
load(":versions.bzl", "VERSIONS")

bzl_library(
    name = "architecture_constants",
    srcs = ["architecture_constants.bzl"],
    visibility = ["//visibility:private"],
)

bzl_library(
    name = "user_clang_toolchain_repository",
    srcs = ["user_clang_toolchain_repository.bzl"],
    visibility = ["//visibility:private"],
)

bzl_library(
    name = "versions",
    srcs = ["versions.bzl"],
    visibility = ["//visibility:public"],
)

bzl_library(
    name = "register",
    srcs = ["register.bzl"],
    visibility = ["//visibility:public"],
    deps = [
        ":architecture_constants",
        ":user_clang_toolchain_repository",
        ":versions",
    ],
)

# Default toolchains.

[clang_toolchain(
    name = "{}_{}_clang_toolchain".format(target_os, target_cpu),
    clang_pkg = "//prebuilts/clang/host/linux-x86/clang-{}".format(VARS["CLANG_VERSION"]),
    clang_version = VARS["CLANG_VERSION"],
    target_cpu = target_cpu,
    target_os = target_os,
) for target_os, target_cpu in SUPPORTED_ARCHITECTURES]

# Versioned toolchains: extra toolchains when a certain version is requested.

constraint_setting(name = "clang_version")

[constraint_value(
    name = version,
    constraint_setting = ":clang_version",
    visibility = ["//visibility:public"],
) for version in VERSIONS]

[clang_toolchain(
    name = "{}_{}_{}_clang_toolchain".format(version, target_os, target_cpu),
    clang_pkg = "//prebuilts/clang/host/linux-x86/clang-{}".format(version),
    clang_version = version,
    extra_compatible_with = [version],
    target_cpu = target_cpu,
    target_os = target_os,
) for version in VERSIONS for target_os, target_cpu in SUPPORTED_ARCHITECTURES]
